from scipy.interpolate import interp1d
import pylab
import pandas as pd

x = [1,2,3,4,5,6,7,8,9,10,12,15,20,25,30]
y = [0.620,0.987,1.350,1.687,1.965,2.192,2.382,2.543,2.679,2.791,2.962,3.124,3.248,3.287,3.302]

#TO DISPLAY THE RATE TABLES - Original LIBOR/SFR, DISC_LIBOR and IMPLIED FORWARD RATE
print ""
rateTable = pd.DataFrame.from_items([('Period', x),('Original_Rate', y)])
print(rateTable.to_string())

"""
Consider the swap rates below available for the stated years. But lets say we 
want to value every quarter for 30 years.  We need to interpolate for the periods
for which the rates are anot available.

    Period  Original_Rate
0        1          0.620
1        2          0.987
2        3          1.350
3        4          1.687
4        5          1.965
5        6          2.192
6        7          2.382
7        8          2.543
8        9          2.679
9       10          2.791
10      12          2.962
11      15          3.124
12      20          3.248
13      25          3.287
14      30          3.302

"""

#Interpolate available data for rates and dates
f = interp1d(x,y, kind='cubic')  #kind can be changed to linear, slinear, quadratic, zero and nearest

#Identify cashflow dates for which rates are missing

xint = [1.25,1.50,1.75,2.25,2.50,2.75,3.25,3.50,3.75,4.25,4.50,4.75,5.25,5.50,5.75,6.25,6.50,6.75,
        7.25,7.50,7.75,8.25,8.50,8.75,9.25,9.50,9.75,10.25,10.50,10.75,11.00,11.25,11.50,11.75,12.25,12.50,12.75,
        13.00,13.25,13.50,13.75,14.00,14.25,14.50,14.75,15.25,15.50,15.75,16.00,16.25,16.50,16.75,17.00,17.25,17.50,17.75,18.00,18.25,18.50,18.75,
        19.00,19.25,19.50,19.75,20.25,20.50,20.75,21.00,21.25,21.50,21.75,22.00,22.25,22.50,22.75,23.00,23.25,23.50,23.75,24.00,24.25,24.50,24.75,
        25.25,25.50,25.75,26.00,26.25,26.50,26.75,27.00,27.25,27.50,27.75,28.00,28.25,28.50,28.75,29.00,29.25,29.50,29.75]
        
#Use function to interpolate for the missing rates
yint = f(xint)

#Combine interest rates - Original + Interpolated
y = y + list(yint)

#Combine payment dates - Original + Interpolated
x = x + xint
    
x.sort()
y.sort()

#Rename Original data
x1 = [1,2,3,4,5,6,7,8,9,10,12,15,20,25,30]
y1 = [0.620,0.987,1.350,1.687,1.965,2.192,2.382,2.543,2.679,2.791,2.962,3.124,3.248,3.287,3.302]

#Fit the curve - Original data versus interpolated...only linear, slinear and cubic fitted our model well
#This can bet tested by changing kind in line 38
pylab.plot(x1, y1, 'b')
pylab.plot(xint, yint, 'ro')
pylab.title('Linear Interpolation of Interest Rates') 
pylab.show()

#To display interpolated data.
print ""
rateTable = pd.DataFrame.from_items([('Period', x),('Interpolated_Rate', y)])
print(rateTable.to_string())

"""
     Period  Interpolated_Rate
0      1.00           0.620000
1      1.25           0.711607
2      1.50           0.803368
3      1.75           0.895195
4      2.00           0.987000
5      2.25           1.078660
6      2.50           1.169913
7      2.75           1.260459
8      3.00           1.350000
9      3.25           1.438157
10     3.50           1.524230
11     3.75           1.607438
12     4.00           1.687000
13     4.25           1.762320
14     4.50           1.833540
15     4.75           1.900991
16     5.00           1.965000
17     5.25           2.025877
18     5.50           2.083858
19     5.75           2.139160
20     6.00           2.192000
21     6.25           2.242578
22     6.50           2.291028
23     6.75           2.337463
24     7.00           2.382000
25     7.25           2.424747
26     7.50           2.465782
27     7.75           2.505176
28     8.00           2.543000
29     8.25           2.579309
30     8.50           2.614095
31     8.75           2.647333
32     9.00           2.679000
33     9.25           2.709095
34     9.50           2.737714
35     9.75           2.764976
36    10.00           2.791000
37    10.25           2.815892
38    10.50           2.839703
39    10.75           2.862472
40    11.00           2.884235
41    11.25           2.905032
42    11.50           2.924900
43    11.75           2.943876
44    12.00           2.962000
45    12.25           2.979307
46    12.50           2.995827
47    12.75           3.011588
48    13.00           3.026620
49    13.25           3.040950
50    13.50           3.054607
51    13.75           3.067619
52    14.00           3.080014
53    14.25           3.091822
54    14.50           3.103069
55    14.75           3.113786
56    15.00           3.124000
57    15.25           3.133737
58    15.50           3.143014
59    15.75           3.151847
60    16.00           3.160248
61    16.25           3.168233
62    16.50           3.175817
63    16.75           3.183014
64    17.00           3.189839
65    17.25           3.196306
66    17.50           3.202429
67    17.75           3.208224
68    18.00           3.213705
69    18.25           3.218887
70    18.50           3.223784
71    18.75           3.228411
72    19.00           3.232781
73    19.25           3.236911
74    19.50           3.240815
75    19.75           3.244506
76    20.00           3.248000
77    20.25           3.251310
78    20.50           3.254442
79    20.75           3.257404
80    21.00           3.260199
81    21.25           3.262835
82    21.50           3.265315
83    21.75           3.267648
84    22.00           3.269837
85    22.25           3.271888
86    22.50           3.273808
87    22.75           3.275601
88    23.00           3.277274
89    23.25           3.278832
90    23.50           3.280281
91    23.75           3.281627
92    24.00           3.282875
93    24.25           3.284030
94    24.50           3.285099
95    24.75           3.286087
96    25.00           3.287000
97    25.25           3.287844
98    25.50           3.288627
99    25.75           3.289357
100   26.00           3.290043
101   26.25           3.290694
102   26.50           3.291318
103   26.75           3.291923
104   27.00           3.292519
105   27.25           3.293113
106   27.50           3.293715
107   27.75           3.294332
108   28.00           3.294973
109   28.25           3.295648
110   28.50           3.296363
111   28.75           3.297128
112   29.00           3.297952
113   29.25           3.298842
114   29.50           3.299808
115   29.75           3.300858
116   30.00           3.302000

"""
