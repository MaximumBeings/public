  *---------------------------------------*
TOPIC: Importing Data into Python & Calculating VaR Using Historical Loss Distribution

#SOURCE: Introduction to Credit Risk Management - TU Delft via Edx

#DISCUSSION: This is just a conversion of the class sample on calculation of VaR for historical
# loss distribution from R to SAS. I am converting some the course codes (in R) and other manual examples
# to SAS just for the sake of doing so. Auditing the class to refresh and while away time.
#
#Question: Calculate the VaR at 95% confidence interval for a loss distirbution consisting of 1504 records.

#The first few records in the data are listed below: (To get the complete file, register for the course free of charge
#on edx - this is just to help us visualize what the data looks like).

Losses
-1.1981768206
1.0061948139
0.5014854404
3.0888666123
-1.0104259483
8.310673145
-1.2446009764
5.7272036791
-1.2406875928

# So next time we will post the SAS code to calculate Expected Shortfall even though this was done manually in
#the course, we will implement it in python just because we can. Also we will convert the R implementation of the Merton model
# for calculating probability of default (PD) to SAS. 

CONCLUSION:
The VaR calculated by this program is 6.68171 versus 6.67961 generated by R and Python.  I guess with SAS you can set different
options in the program (which we will not explore) but they are quite close.
   *---------------------------------------*;



options nodate ps=60 ls=80;
data losses (drop=number);
infile 'C:\users\losses.txt' delimiter = ';' MISSOVER  DSD lrecl=32767 firstobs=2 ; **Change to file location on your computer
input number losses;
run;
proc print data=losses (obs=10) ;
run;

proc univariate data=losses noprint;
  var losses;
  output out=VaR pctlpts=95  pctlpre=P;
run;
proc print data=VaR;
run;
