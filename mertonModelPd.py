"""
TOPIC: Calculation of Probability of Default (PD) Using the Merton Model

SOURCE: Introduction to Credit Risk - TU Delft via EDX - This is essentially a conversion of the R code provided in the
course to Python.  

DISCUSSION:  The Merton model of PD is essentially a theoretical model that most modern structural models are based on.  It
is however still good to understand it because it helps in understanding other modern models that we will eventually discuss.
It is the probability that a security will default within a specific timeframe.

"""

#We start by defining the quantities whose values are known.

s0 = 3.0 #Equity at time 0 i.e. today.
sigmaS = 0.8 #Instantaneous volatility of equity
r = 0.05 #Risk free rate in the market
T=1 #Maturity
B=10 #Face value of debt obligation i.e. liabilities

#We need to write down the function we will minimize in order
#to obtain V0, the value of the company's assets today and 
#sigmaV, the asset's volatility.

from scipy.stats import norm
from scipy import optimize
import math


def f(x):  #x is a list
    v0 = x[0]
    sigmaV=x[1]
    
    d1 = (math.log(v0/B)+(r+sigmaV**2/2.0)*T)/(sigmaV*math.sqrt(T))
   
    d2 = d1 - sigmaV*math.sqrt(T)
    F = v0*norm.cdf(d1,) - B * math.exp(-r*T) * norm.cdf(d2,) - s0
    G = norm.cdf(d1,) * sigmaV*v0-sigmaS*s0
    return F**2 + G**2

solutions = optimize.fmin_bfgs(f, [10, 0.8], disp=0)  #minimize function using initial values of v0=10 and sigmaV=0.5

#Get the values of v0 and sigmaV that minimizes the solution.
v0 = solutions[0]
sigmaV = solutions[1]

#Explicitly calculate d1 and d2 using the value generated by the optimization function
d1=(math.log(v0/B)+(r+sigmaV**2/2)*T)/(sigmaV*math.sqrt(T))
d2=d1-sigmaV*math.sqrt(T)

# And finally the probability of default in one year for our company is calculated as follows:

print
print "The Probability of Default (PD) is: " + str(norm.cdf(-d2))

#>>> result 
#>>> 0.126971223952


