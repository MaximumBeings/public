# -*- coding: utf-8 -*-
import datetime
from datetime import date
import pandas as pd


"""
        Start Date  '12-24-13'
        
        USD LIBOR Rates & Maturity:
        
        Overnight  '12-25-13'           0.10070
        1 Week     '12-31-13'           0.13055
        1 Month    '01-24-14'           0.16700
        2 Months   '02-24-14'           0.21280
        3 Months   '03-24-14'           0.24685
        6 Months   '06-24-14'           0.34940
        12 Months  '12-24-14'           0.58360
        
        Source: http://www.global-rates.com/interest-rates/libor/libor.aspx
        
        The LIBOR rate is only available for certain maturities, hence, for maturities
        for which there are no LIBOR rates, the rate has to be interpolated using the
        interpolation methodology available at ISDA.ORG.  The interpolation on ISDA's website 
        is a linear interpolation and works like so:
        
        R1 = Known rate with shorter designated maturity
        
        t1 = Days to maturity of R1
        
        R2 = Known rate with longer maturity
        
        t2 = Days to maturity of R2
        
        Rn = Unknown rate between R1 and R2
        
        tn = Days to maturity of Rn
        
        Objective: Find unknown rate Rn with known maturity tn (t1 < tn < t2)
        
        Formulae: Rn = R1 + R2 - R1/t2-t1 * (tn - t1)
            
"""
#We determined that the best data structure to use are lists - one for maturity and the other 
#for the rates corresponding to the maturity.  Note that The reset date for BBA USD Libor rates is normally 
#two days after the fixing date, so the maturity date for 1M Libor fixed on December 5 would normally be January 7. 
#January 7, 2006, however, falls on a Saturday. According to the Modified Following business day convention, the maturity 
#date moves forward to the next “good” business day so long as it is in the same month.  The listMaturities below were
#adjusted to account for fixing versus reset date requirements.  However, for maturities that fall on weekends we did not
#move them to the next good business day.  This will be reflected in an updated version of the code in the near future.

#This is about 70% complete but can work for scenarios where we do not need to adjust for weekends etc.  In order to develop
#more confidence in the model, we have to test it by selecting samples (say 40) and manually recalculating the rates for that
#maturity and compare them to the output generated by our module.  Because of time constraint we will not do that in this iteration
#but we do the testing at a later time.

#We will also fix the timeseries plot so that only certain dates are shown on the x-axis and put proper labels on it.

#In the near future we will spend some time on interpolation and bootstrapping methodologies.


#Variable Declarations:

listMaturities = ['12/27/13','01/02/14','01/26/14','02/26/14','03/26/14','06/26/14','12/26/14']

listRates = [0.10070/100,0.13055/100,0.16700/100, 0.21280/100, 0.24685/100, 0.34940/100, 0.58360/100]

StartDate = "12/24/13"

a = date(2013,12,24)  #Start Date - the date on which we observed the date from the source

b = date(2014,12,26)  #End Date

numDays = (b-a).days


#Main Function

def liborLinearInterpolation(StartDate, listMaturities, listRates,numDays):
    
    Date = datetime.datetime.strptime(StartDate, "%m/%d/%y")
    fmt = '%Y/%m/%d'
    Date.strftime(fmt)

    L = []
    for x in range(1,numDays+1,1):
        L.append((Date+datetime.timedelta(days=x)))
    

    data = {}
    for x in range(len(L)):
    
        if datetime.datetime.strptime(listMaturities[0],"%m/%d/%y").strftime(fmt) < L[x].strftime(fmt) < datetime.datetime.strptime(listMaturities[1],"%m/%d/%y").strftime(fmt):
            tn = ((L[x]) - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t1 = (datetime.datetime.strptime(listMaturities[0], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t2 = (datetime.datetime.strptime(listMaturities[1], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            data.update({L[x].strftime(fmt): listRates[0] + ((listRates[1]-listRates[0])/(t2-t1))*(tn-t1)})
    
        elif datetime.datetime.strptime(listMaturities[1],"%m/%d/%y").strftime(fmt) < L[x].strftime(fmt) < datetime.datetime.strptime(listMaturities[2],"%m/%d/%y").strftime(fmt):
            tn = ((L[x]) - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t1 = (datetime.datetime.strptime(listMaturities[1], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t2 = (datetime.datetime.strptime(listMaturities[2], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            data.update({L[x].strftime(fmt): listRates[1] + ((listRates[2]-listRates[1])/(t2-t1))*(tn-t1)})
        
        elif datetime.datetime.strptime(listMaturities[2],"%m/%d/%y").strftime(fmt) < L[x].strftime(fmt) < datetime.datetime.strptime(listMaturities[3],"%m/%d/%y").strftime(fmt):
            tn = ((L[x]) - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t1 = (datetime.datetime.strptime(listMaturities[2], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t2 = (datetime.datetime.strptime(listMaturities[3], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            data.update({L[x].strftime(fmt): listRates[2] + ((listRates[3]-listRates[2])/(t2-t1))*(tn-t1)})
        
        elif datetime.datetime.strptime(listMaturities[3],"%m/%d/%y").strftime(fmt) < L[x].strftime(fmt) < datetime.datetime.strptime(listMaturities[4],"%m/%d/%y").strftime(fmt):
            tn = ((L[x]) - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t1 = (datetime.datetime.strptime(listMaturities[3], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t2 = (datetime.datetime.strptime(listMaturities[4], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            data.update({L[x].strftime(fmt): listRates[3] + ((listRates[4]-listRates[3])/(t2-t1))*(tn-t1)})
    
        elif datetime.datetime.strptime(listMaturities[4],"%m/%d/%y").strftime(fmt) < L[x].strftime(fmt) < datetime.datetime.strptime(listMaturities[5],"%m/%d/%y").strftime(fmt):
            tn = ((L[x]) - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t1 = (datetime.datetime.strptime(listMaturities[4], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t2 = (datetime.datetime.strptime(listMaturities[5], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            data.update({L[x].strftime(fmt): listRates[4] + ((listRates[5]-listRates[4])/(t2-t1))*(tn-t1)})
    
        elif datetime.datetime.strptime(listMaturities[5],"%m/%d/%y").strftime(fmt) < L[x].strftime(fmt) < datetime.datetime.strptime(listMaturities[6],"%m/%d/%y").strftime(fmt):
            tn = ((L[x]) - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t1 = (datetime.datetime.strptime(listMaturities[5], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            t2 = (datetime.datetime.strptime(listMaturities[6], "%m/%d/%y") - datetime.datetime.strptime(StartDate, "%m/%d/%y")).days
            data.update({L[x].strftime(fmt): listRates[5] + ((listRates[6]-listRates[5])/(t2-t1))*(tn-t1)})



    L2 = []
    for x in range(0,7,1):
        L2.append(datetime.datetime.strptime(listMaturities[x],"%m/%d/%y"))
  

    data.update({L2[0].strftime(fmt): listRates[0]})
    data.update({L2[1].strftime(fmt): listRates[1]})
    data.update({L2[2].strftime(fmt): listRates[2]})
    data.update({L2[3].strftime(fmt): listRates[3]})
    data.update({L2[4].strftime(fmt): listRates[4]})
    data.update({L2[5].strftime(fmt): listRates[5]})
    data.update({L2[6].strftime(fmt): listRates[6]})


    df = pd.Series(data)
    df.plot()
    
    return df

#Sample Call
#liborLinearInterpolation(StartDate, listMaturities, listRates,numDays)
#StartDate - String
#listMaturities - List
#listRates - List
#numDays - int
#listMaturities = ['12/27/13','01/02/14','01/26/14','02/26/14','03/26/14','06/26/14','12/26/14']
#listRates = [0.10070/100,0.13055/100,0.16700/100, 0.21280/100, 0.24685/100, 0.34940/100, 0.58360/100]
#StartDate = "12/24/13"
#a = date(2013,12,24)  #Start Date - the date on which we observed the date from the source
#b = date(2014,12,26)  #End Date
#numDays = (b-a).days

#Sample Output
"""
2013/12/27    0.001007
2013/12/28    0.001057
2013/12/29    0.001107
2013/12/30    0.001156
2013/12/31    0.001206
2014/01/01    0.001256
2014/01/02    0.001306
2014/01/03    0.001321
2014/01/04    0.001336
2014/01/05    0.001351
2014/01/06    0.001366
2014/01/07    0.001381
2014/01/08    0.001397
2014/01/09    0.001412
2014/01/10    0.001427
...
2014/12/12    0.005657
2014/12/13    0.005670
2014/12/14    0.005682
2014/12/15    0.005695
2014/12/16    0.005708
2014/12/17    0.005721
2014/12/18    0.005734
2014/12/19    0.005746
2014/12/20    0.005759
2014/12/21    0.005772
2014/12/22    0.005785
2014/12/23    0.005798
2014/12/24    0.005810
2014/12/25    0.005823
2014/12/26    0.005836
"""
